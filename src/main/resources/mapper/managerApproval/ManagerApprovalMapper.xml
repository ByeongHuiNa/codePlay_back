<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.codeplay.mapper.managerApproval.ManagerApprovalMapper">
	<!-- 로그인 한 근태담당자의 휴가 결재 내역 가져오기 (1차 결재자 승인 전에는 2차 결재자에게 보여지지 않는다.) -->
	<select id="findLeaveApprovalByUserNo" parameterType="Integer" resultType="com.codeplay.domain.managerApproval.vo.ApprovalLeaveResponseVo">
		SELECT la.leaveapp_no, la.user_no, la_u.user_name, la.leaveapp_title, la.leaveapp_content, la.leaveapp_start, la.leaveapp_end, 
			la.leaveapp_status, la.leaveapp_final_date, la.leaveapp_type, la.leaveapp_total, la.leaveapp_req_date, lal.leaveappln_no, 
			lal.leaveappln_user_no, lal_u.user_name as "leaveappln_user_name", lal.leaveappln_order, lal.leaveappln_status, 
			lal.leaveappln_date, lal.leaveappln_reason, la.leaveapp_cancel_no, d.dept_name
		FROM leave_approval la 
		INNER JOIN users la_u ON la.user_no = la_u.user_no 
		INNER JOIN leave_approval_line lal ON la.leaveapp_no = lal.leaveapp_no
		INNER JOIN users lal_u ON lal.leaveappln_user_no = lal_u.user_no
		INNER JOIN dept_assign da ON da.user_no = la_u.user_no
		INNER JOIN dept d ON d.dept_no = da.dept_no
		WHERE (lal.leaveappln_order = 1 OR (lal.leaveappln_order = 2 AND EXISTS (
		    SELECT 1 FROM leave_approval_line lal2 
		    WHERE lal2.leaveapp_no = lal.leaveapp_no AND lal2.leaveappln_status = 0)))
		AND lal.leaveappln_user_no = #{user_no}
		AND lal.leaveappln_status != 4
		ORDER BY lal.leaveappln_date DESC
	</select>
	
	<!-- 로그인 한 근태담당자의 출퇴근 결재 내역 가져오기 -->
	<select id="findAttendApprovalByUserNo" parameterType="Integer" resultType="com.codeplay.domain.managerApproval.vo.ApprovalAttendResponseVo">
		<![CDATA[ 
		SELECT a.attend_no, a.user_no, u_a.user_name, a.attend_start, a.attend_end, a.attend_status, a.attend_date, a.attend_total, 
			aea.attendapp_no, aea.attendapp_user_no, u_aea.user_name as "attendapp_user_name", aea.attendedit_title, 
			aea.attendedit_reason, aea.attendedit_kind, aea.attendedit_start_time, aea.attendedit_end_time, aea.attendedit_date, 
			aea.attendapp_status, aea.attendapp_reason, aea.attendapp_date, aea.attendoriginal_start_time, 
			aea.attendoriginal_end_time, aea.attendoriginal_status
		FROM attendance a 
		INNER JOIN attendance_edit_approval aea ON a.attend_no = aea.attend_no 
		INNER JOIN users u_a ON a.user_no = u_a.user_no 
		INNER JOIN users u_aea ON aea.attendapp_user_no = u_aea.user_no
		WHERE aea.attendapp_user_no = #{user_no} AND aea.attendedit_kind < 3 
		ORDER BY aea.attendapp_date DESC
		]]>
	</select>
	
	<!-- 근태담당자의 휴가 결재 처리 1차 (승인,반려) : 휴가신청 -->
	<update id="updateFirstLeaveApproval" parameterType="ApprovalRequestVo">
	<![CDATA[		WITH updated_data AS (
		    UPDATE leave_approval
		    SET leaveapp_status = CASE
		        WHEN #{leaveappln_status} = 0 THEN 2
		        WHEN #{leaveappln_status} = 1 THEN 1
		        ELSE leaveapp_status
		    end,
		    leaveapp_final_date = case 
		    	WHEN #{leaveappln_status} = 1 THEN CURRENT_DATE
		    	ELSE leaveapp_final_date
		    end
		    WHERE leaveapp_no = #{leaveapp_no}
		    RETURNING leaveapp_no, leaveapp_status
		)
		UPDATE leave_approval_line
		SET leaveappln_status = CASE
		        WHEN leaveappln_order = 1 AND #{leaveappln_status} = 0 THEN 0
		        WHEN leaveappln_order = 1 AND #{leaveappln_status} = 1 THEN 1
		        WHEN leaveappln_order = 2 AND #{leaveappln_status} = 1 THEN 4
		        ELSE leaveappln_status
		    END,
		    leaveappln_date = CASE
		        WHEN (leaveappln_order = 1 AND (#{leaveappln_status} = 0 OR #{leaveappln_status} = 1)) 
		        	OR (leaveappln_order = 2 AND #{leaveappln_status} = 1) THEN CURRENT_DATE
		        ELSE leaveappln_date
		    end,
		    leaveappln_reason = case
		    	WHEN leaveappln_order = 1 AND (#{leaveappln_status} = 0 OR #{leaveappln_status} = 1) then #{leaveappln_reason}
		    	WHEN leaveappln_order = 2 AND (#{leaveappln_status} = 1) then '1차결재 반려로 인한 자동반려 처리'
		    	ELSE leaveappln_reason
		    end
		WHERE leaveapp_no = (SELECT leaveapp_no FROM updated_data)
		]]>
	</update>
		
	<!-- 근태담당자의 휴가 결재 처리 1차 (승인,반려) : 휴가취소신청 -->
	<update id="updateLeaveCancelApproval"  parameterType="ApprovalRequestVo">
	<![CDATA[
		WITH updated_data AS (
		    UPDATE leave_approval
		    SET leaveapp_status = CASE
		        WHEN #{leaveappln_status} = 0 THEN 0
		        WHEN #{leaveappln_status} = 1 THEN 1
		        ELSE leaveapp_status
		    end,
		    leaveapp_final_date = CURRENT_DATE
		    WHERE leaveapp_no = #{leaveapp_no}
		    RETURNING leaveapp_no, leaveapp_status
		)
		UPDATE leave_approval_line
		SET leaveappln_status = #{leaveappln_status},
		    leaveappln_date = CURRENT_DATE,
		    leaveappln_reason = #{leaveappln_reason}
		WHERE leaveapp_no = (SELECT leaveapp_no FROM updated_data)
		]]>
	</update>
	
	<!-- 근태담당자의 휴가 결재 처리 2차 (승인,반려) : 휴가신청, 휴가취소신청 -->
	<update id="updateSecondLeaveApproval"  parameterType="ApprovalRequestVo">
	<![CDATA[
		WITH updated_data AS (
		    UPDATE leave_approval
		    SET leaveapp_status = CASE
		        WHEN #{leaveappln_status} = 0 THEN 0
		        WHEN #{leaveappln_status} = 1 THEN 1
		        ELSE leaveapp_status
		    end,
		    leaveapp_final_date = CURRENT_DATE
		    WHERE leaveapp_no = #{leaveapp_no}
		    RETURNING leaveapp_no, leaveapp_status
		)
		UPDATE leave_approval_line
		SET leaveappln_status = CASE
		        WHEN #{leaveappln_status} = 0 THEN 0
		        WHEN #{leaveappln_status} = 1 THEN 1
		        ELSE leaveappln_status
		    END,
		    leaveappln_date = case 
		    	WHEN leaveappln_order = 2 then CURRENT_DATE
		    	ELSE leaveappln_date
		    end,
		    leaveappln_reason = case 
		    	WHEN leaveappln_order = 2 then #{leaveappln_reason}
		    	ELSE leaveappln_reason
		    end
		WHERE leaveapp_no = (SELECT leaveapp_no FROM updated_data)
		]]>
	</update>
	
	<!-- 근태담당자의 휴가 결재 승인 시 출퇴근 테이블에 등록 -->
	<insert id="saveLeaveToAttendance" parameterType="AddAttendDto">
		INSERT INTO attendance (user_no, attend_date, attend_status, attend_total)
		VALUES(#{user_no}, #{attend_date}, #{status}, #{attend_total})
	</insert>
	
	<!-- 사용자의 잔여휴가 수정 -->
	<update id="updateLeave">
		UPDATE leave
		SET leave_use = leave_use + #{leaveapp_total},
			leave_remain = leave_remain - #{leaveapp_total}
		WHERE user_no = #{user_no}
	</update>
	
	<!-- 사용자의 잔여휴가 조회 -->
	<select id="findLeaveByUserNo">
		SELECT * FROM leave
		WHERE user_no = #{user_no}
	</select>
	
	<!-- 수정 요청자의 정규 출퇴근 시간 조회 -->	<select id="findAttendTimeByUserNo" parameterType="Integer" resultType="com.codeplay.domain.managerApproval.dto.AttendPolicyDto">
		SELECT p.standard_start_time, p.standard_end_time FROM policy p
		JOIN user_policy up on p.policy_no = up.policy_no
		WHERE up.user_no = #{user_no}
		ORDER BY up.policy_designated_date desc
		LIMIT 1
	</select>
	
	<!-- 근태담당자의 출퇴근 수정 결재 처리 -->
	<update id="updateAttendApproval" parameterType="ApprovalAttendRequestVo">
	<![CDATA[
		UPDATE attendance_edit_approval
		SET attendapp_status = CASE
		        WHEN #{attendapp_status} = 0 THEN 0
		        WHEN #{attendapp_status} = 1 THEN 1
		        ELSE attendapp_status
		    END,
		    attendapp_date = CURRENT_DATE,
		    attendapp_reason = #{attendapp_reason}
		WHERE attendapp_no = #{attendapp_no}
		]]>
	</update>
	
	<!-- 근태담당자의 결재 승인 시 출퇴근 수정 처리 -->
	<update id="updateAttend" parameterType="ApprovalAttendRequestDto">
	UPDATE attendance
		SET attend_start = #{attend_start},
			attend_end = #{attend_end},
		    attend_total = #{attend_total},
		    attend_status = #{attend_status}
		WHERE attend_no = #{attend_no}
	</update>
	
	<!-- 출퇴근 상태 판단 시 반차(휴가) 확인 -->
	<select id="findHalfLeaveByUserNo" parameterType="HalfLeaveDto" resultType="Integer">
		SELECT COALESCE(
        (SELECT 
            CASE
                WHEN leaveapp_type = 1 THEN 1 <!-- 오전 반차 -->
                WHEN leaveapp_type = 2 THEN 2 <!-- 오후 반차 -->
                ELSE 0 <!-- 해당없음 -->
            END AS leaveapp_type
        FROM leave_approval
        WHERE user_no = #{user_no}
        AND leaveapp_status = 0
        AND leaveapp_start = #{attend_date}), 0) as leaveapp_type
	</select>
	
	<!-- 특정 날짜에 휴가를 사용한 같은 부서의 직원  -->
	<select id="findDeptLeaveByUserNo" parameterType="DeptLeaveRequestDto" resultType="Integer">
	SELECT COUNT(*) FROM users u
	    INNER JOIN dept_assign da ON u.user_no = da.user_no
	    INNER JOIN leave_approval la ON la.user_no = u.user_no
	WHERE da.dept_no IN (SELECT dept_no FROM dept_assign WHERE user_no = #{user_no})
	    AND date_trunc('day', #{leaveapp_date}) >= la.leaveapp_start
	    AND la.leaveapp_end >= date_trunc('day', #{leaveapp_date})
	    AND la.leaveapp_status = 0
	    AND la.leaveapp_type != 4
	</select>
	
	<!-- 같은 부서의 총 직원 수  -->
	<select id="findDeptUsersByUserNo" parameterType="Integer" resultType="Integer">
	SELECT COUNT(*) FROM users u
		INNER JOIN dept_assign da ON u.user_no = da.user_no
	WHERE da.dept_no IN (SELECT dept_no FROM dept_assign WHERE user_no = #{user_no}) 
	</select>
	
	<!-- 휴가 2차 결재자의 번호 조회하기 -->
	<select id="findSecondAppByLeaveappNo" parameterType="Integer" resultType="Integer">
	SELECT leaveappln_user_no FROM leave_approval_line
	WHERE leaveappln_order = 2 AND leaveapp_no = #{leaveapp_no}
	</select>
	
	<!-- 근태담당자의 초과근무 결재 리스트 가져오기 -->
	<select id="findOvertimeApprovalByUserNo" parameterType="Integer" resultType="ApprovalOvertimeResponseVo">
	SELECT o.overtime_no, u.user_no, u.user_name, a.attend_no, a.attend_start, a.attend_end, a.attend_total, 
		a.attend_date, o.overtime_type, o.overtime_time, o.overtime_content, o.overtime_reason, o.overtime_date, 
		o.overtimeapp_user_no, o.overtimeapp_status, o.overtimeapp_reason, o.overtimeapp_date 
	FROM overtime o
		INNER JOIN attendance a ON o.attend_no = a.attend_no
		INNER JOIN users u ON a.user_no = u.user_no
	WHERE o.overtimeapp_user_no = #{user_no}
	</select>
	
	<!-- 근태담당자의 결재 승인 시 초과근무 수정 처리 -->
	<update id="updateOvertimeApproval" parameterType="OvertimeVo">
	UPDATE overtime
		SET overtimeapp_status = #{overtimeapp_status},
			overtimeapp_reason = #{overtimeapp_reason},
		    overtimeapp_date = CURRENT_DATE
		WHERE overtime_no = #{overtime_no}
	</update>
	
	<!-- 근태 번호로 근태 데이터 가져오기 -->
	<select id="findAttendByAttendNo" parameterType="Integer" resultType="AttendanceVo">
	SELECT * FROM attendance
	WHERE attend_no = #{attend_no}
	</select>
</mapper>

