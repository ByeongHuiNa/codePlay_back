<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.codeplay.mapper.userAttend.UserAttendMapper">
	<!-- 사용자의 전체 출퇴근(근태) 내역 : user_no 사용 -->
    <select id="findAttendByUserNo" parameterType="Integer" resultType="AttendanceVO">
        select * from attendance 
        where user_no =#{user_no}
         order by date(attend_date) desc;
    </select>
    
    <!-- 사용자의 웝별 출퇴근(근태) 내역 : user_no, month 사용 -->
    <select id="findAttendByUserNoMonth" parameterType="Integer" resultType="AttendanceVO">
       select * from attendance where user_no =#{user_no}
        and date_part('month', attend_date) = #{month}
        order by attend_date desc
    </select>
    
    <!-- 사용자의 선택한 날짜의 출퇴근(근태) 내역 : user_no, date 사용 -->
    <select id="findAttendByUserNoDate" parameterType="Integer" resultType="AttendanceVO">
    select * from attendance where user_no = #{user_no}
	    and date_part('year', attend_date) = #{year}
	    and date_part('month', attend_date) = #{month}
	    and date_part('day', attend_date) = #{day}
	</select>
    
    <!-- 사용자가 속한 부서의 근태담당자 내역 : dept_no 사용 -->
	<select id="findManagerByDeptNo" parameterType="Integer" resultType="UserVO">
		select * from attendance_manager am 
			join users u on u.user_no = am.user_no 
			where dept_no = ${dept_no} 
	</select>
	
	<!-- 사용자의 오늘 날짜 출퇴근/내역 : user_no 사용 -->
    <select id="findTodayByUserNo" parameterType="Integer" resultType="AttendanceVO">
        select * from attendance 
        where user_no =#{user_no}
        and date(attend_date) = date(now())
        ORDER BY attend_no DESC
      	LIMIT 1
    </select>
    
    <!-- 사용자의 출근입력-->
    <insert id="startInsert" parameterType="AttendanceVO">
		<![CDATA[ 
		INSERT INTO attendance (user_no, attend_start, attend_date, attend_status)
			VALUES (
			  #{user_no},
			  CURRENT_TIMESTAMP AT TIME ZONE 'Asia/Seoul',
			  CURRENT_DATE,
			  CASE
			    WHEN EXTRACT(HOUR FROM NOW()) >= EXTRACT(HOUR FROM (SELECT p.standard_start_time FROM policy p INNER JOIN user_policy up ON p.policy_no = up.policy_no WHERE up.user_no = #{user_no}))
			    	THEN '지각'
			    ELSE '정상'
			  END
			)
		]]>
	</insert>
	
	<!-- 사용자의 퇴근입력-->
  <update id="endInsert" parameterType="AttendanceVO">
    <![CDATA[
	   UPDATE attendance
		SET
		    attend_end = NOW(),
		    attend_total = 
		       CASE
		            WHEN EXTRACT(HOUR FROM NOW()) >= EXTRACT(HOUR FROM (SELECT p.standard_end_time FROM policy p INNER JOIN user_policy up ON p.policy_no = up.policy_no WHERE up.user_no = #{user_no}))
		                AND EXTRACT(HOUR FROM (SELECT attend_start FROM attendance WHERE user_no = #{user_no} ORDER BY attend_no DESC LIMIT 1)) < EXTRACT(HOUR FROM (SELECT p.standard_start_time FROM policy p INNER JOIN user_policy up ON p.policy_no = up.policy_no WHERE up.user_no = #{user_no}))
		                THEN ((SELECT p.standard_end_time FROM policy p INNER JOIN user_policy up ON p.policy_no = up.policy_no WHERE up.user_no = #{user_no}) - (SELECT p.standard_start_time FROM policy p INNER JOIN user_policy up ON p.policy_no = up.policy_no WHERE up.user_no = #{user_no})) - interval '1 hour'::interval
		            WHEN EXTRACT(HOUR FROM NOW()) >= EXTRACT(HOUR FROM (SELECT p.standard_end_time FROM policy p INNER JOIN user_policy up ON p.policy_no = up.policy_no WHERE up.user_no = #{user_no}))
		                AND EXTRACT(HOUR FROM (SELECT attend_start FROM attendance WHERE user_no = #{user_no} ORDER BY attend_no DESC LIMIT 1)) >= EXTRACT(HOUR FROM (SELECT p.standard_start_time FROM policy p INNER JOIN user_policy up ON p.policy_no = up.policy_no WHERE up.user_no = #{user_no}))
		                THEN ((SELECT p.standard_end_time FROM policy p INNER JOIN user_policy up ON p.policy_no = up.policy_no WHERE up.user_no = #{user_no}) - (SELECT attend_start FROM attendance WHERE user_no = #{user_no} ORDER BY attend_no DESC LIMIT 1)) - interval '1 hour'::interval
		            WHEN EXTRACT(HOUR FROM NOW()) < EXTRACT(HOUR FROM (SELECT p.standard_end_time FROM policy p INNER JOIN user_policy up ON p.policy_no = up.policy_no WHERE up.user_no = #{user_no}))
		                AND EXTRACT(HOUR FROM (SELECT attend_start FROM attendance WHERE user_no = #{user_no} ORDER BY attend_no DESC LIMIT 1)) < EXTRACT(HOUR FROM (SELECT p.standard_start_time FROM policy p INNER JOIN user_policy up ON p.policy_no = up.policy_no WHERE up.user_no = #{user_no}))
		                THEN (NOW()::time - (SELECT p.standard_start_time FROM policy p INNER JOIN user_policy up ON p.policy_no = up.policy_no WHERE up.user_no = #{user_no}))
		            ELSE
		                NULL -- 다른 경우에는 NULL 또는 다른 값을 설정할 수 있습니다.
		        END,
		    attend_status =
		        CASE
		            WHEN EXTRACT(HOUR FROM NOW()) >= EXTRACT(HOUR FROM (SELECT p.standard_end_time FROM policy p INNER JOIN user_policy up ON p.policy_no = up.policy_no WHERE up.user_no = #{user_no}))
		                AND EXTRACT(HOUR FROM (SELECT attend_start FROM attendance WHERE user_no = #{user_no} ORDER BY attend_no DESC LIMIT 1)) < EXTRACT(HOUR FROM (SELECT p.standard_start_time FROM policy p INNER JOIN user_policy up ON p.policy_no = up.policy_no WHERE up.user_no = #{user_no}))
		                THEN '정상'
		            WHEN EXTRACT(HOUR FROM NOW()) >= EXTRACT(HOUR FROM (SELECT p.standard_end_time FROM policy p INNER JOIN user_policy up ON p.policy_no = up.policy_no WHERE up.user_no = #{user_no}))
		                AND EXTRACT(HOUR FROM (SELECT attend_start FROM attendance WHERE user_no = #{user_no} ORDER BY attend_no DESC LIMIT 1)) >= EXTRACT(HOUR FROM (SELECT p.standard_start_time FROM policy p INNER JOIN user_policy up ON p.policy_no = up.policy_no WHERE up.user_no = #{user_no}))
		                THEN '지각'
		            WHEN EXTRACT(HOUR FROM NOW()) < EXTRACT(HOUR FROM (SELECT p.standard_end_time FROM policy p INNER JOIN user_policy up ON p.policy_no = up.policy_no WHERE up.user_no = #{user_no}))
		                AND EXTRACT(HOUR FROM (SELECT attend_start FROM attendance WHERE user_no = #{user_no} ORDER BY attend_no DESC LIMIT 1)) < EXTRACT(HOUR FROM (SELECT p.standard_start_time FROM policy p INNER JOIN user_policy up ON p.policy_no = up.policy_no WHERE up.user_no = #{user_no}))
		                THEN '조퇴'
		            ELSE '결근'
		        END
		WHERE attend_no = (
		    SELECT attend_no
		    FROM attendance
		    WHERE user_no = #{user_no}
		    ORDER BY attend_no DESC
		    LIMIT 1
	)
    ]]>
  </update>

	<!-- 사용자의 주간 근무시간 -->
		<select id="getUserAttendTotal" parameterType="Integer" resultType="AttendanceVO">
			SELECT *
			FROM attendance
			WHERE user_no = #{user_no}
			  AND DATE_TRUNC('week', attend_date) = DATE_TRUNC('week', NOW())
			  order by date(attend_date) asc
		</select>
	
	<!-- 부서별 사원들의 일별근태 현황 -->
	<select id="seeUsersAttendDay" parameterType="Integer" resultType="com.codeplay.domain.attend.vo.UsersAttendVo">
		SELECT
		    d.dept_no,
		    d.dept_name,
		    da.user_no,
		    da.dept_designated_date,
		    u.user_name,
		    u.user_position,
		    a.attend_no,
		    a.attend_start,
		    a.attend_end,
		    a.attend_status,
		    a.attend_total,
		    a.attend_date
		FROM
		    dept d
		INNER JOIN
		    dept_assign da ON d.dept_no = da.dept_no
		INNER JOIN
		    users u ON da.user_no = u.user_no
		INNER JOIN
		    attendance a ON u.user_no = a.user_no
		   	where d.dept_no = #{dept_no}

	</select>
	<!-- 부서별 사원들의 주간근태 현황 -->
	<select id="seeUsersAttendWeek" resultType="com.codeplay.domain.attend.vo.UsersAttendWeekVo">
			 <![CDATA[
	SELECT
	    d.dept_no,
	    d.dept_name,
	    da.user_no,
	    da.dept_designated_date,
	    u.user_name,
	    u.user_position,
	    MAX(CASE WHEN a.attend_date = week_start + INTERVAL '-1 days' THEN a.attend_status END) AS monday_status,
	    MAX(CASE WHEN a.attend_date = week_start + INTERVAL '0 days' THEN a.attend_status END) AS tuesday_status,
	    MAX(CASE WHEN a.attend_date = week_start + INTERVAL '1 days' THEN a.attend_status END) AS wednesday_status,
	    MAX(CASE WHEN a.attend_date = week_start + INTERVAL '2 days' THEN a.attend_status END) AS thursday_status,
	    MAX(CASE WHEN a.attend_date = week_start + INTERVAL '3 days' THEN a.attend_status END) AS friday_status,
	    MAX(CASE WHEN a.attend_date = week_start + INTERVAL '4 days' THEN a.attend_status END) AS saturday_status,
	    MAX(CASE WHEN a.attend_date = week_start + INTERVAL '5 days' THEN a.attend_status END) AS sunday_status,
	     CONCAT(
        EXTRACT(HOUR FROM interval '1 second' * SUM(EXTRACT(EPOCH FROM a.attend_total))),
        '시간 ',
        EXTRACT(MINUTE FROM interval '1 second' * SUM(EXTRACT(EPOCH FROM a.attend_total))),
        '분'
    ) AS total_time
	FROM
	    dept d
	INNER JOIN
	    dept_assign da ON d.dept_no = da.dept_no
	INNER JOIN
	    users u ON da.user_no = u.user_no
	LEFT JOIN
	    attendance a ON u.user_no = a.user_no
	CROSS JOIN LATERAL (
	    SELECT
	        date_trunc('week', #{week_monday}::DATE) + interval '1 day' AS week_start
	) AS week_start_info
	WHERE
	    d.dept_no = #{dept_no}
	    AND a.attend_date + INTERVAL '1 days' >= week_start
    AND a.attend_date < week_start + INTERVAL '7 days' 
	GROUP BY
	    d.dept_no,
	    d.dept_name,
	    da.user_no,
	    da.dept_designated_date,
	    u.user_name,
	    u.user_position
	ORDER BY
	    CASE 
	        WHEN u.user_position = '부장' THEN 1
	        WHEN u.user_position = '과장' THEN 2
	        WHEN u.user_position = '팀장' THEN 3
	        WHEN u.user_position = '대리' THEN 4
	        WHEN u.user_position = '사원' THEN 5
	        ELSE 6
	    end  ]]>
		
	</select>
	<!-- 1번 부서 사원들 결근시 자동 insert -->
	<insert id = "autoInsert" parameterType="AttendanceVO">
		INSERT INTO attendance (user_no, attend_status, attend_date)
			SELECT 
			    n AS user_no,
			    '결근' AS attend_status,
			    CURRENT_DATE AS attend_date
			FROM (
			    SELECT generate_series(1, 7) AS n
			) AS numbers
			WHERE NOT EXISTS (
			    SELECT 1
			    FROM attendance
			    WHERE user_no = numbers.n
			        AND attend_date = CURRENT_DATE
			)

		
	</insert>
		
	
	
	</mapper>


